// Code generated by "stringer -type=Word -output=keywords.strings.go"; DO NOT EDIT.

package keywords

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SELECT-0]
	_ = x[FROM-1]
	_ = x[WHERE-2]
	_ = x[LIMIT-3]
	_ = x[OFFSET-4]
	_ = x[CREATE-5]
	_ = x[TABLE-6]
	_ = x[PRIMARY-7]
	_ = x[KEY-8]
	_ = x[UNIQUE-9]
	_ = x[INDEX-10]
	_ = x[CONSTRAINT-11]
	_ = x[FOREIGN-12]
	_ = x[NULL-13]
	_ = x[IS-14]
	_ = x[NOT-15]
	_ = x[DISTINCT-16]
	_ = x[GROUP-17]
	_ = x[BY-18]
	_ = x[WITH-19]
	_ = x[HAVING-20]
	_ = x[INNER-21]
	_ = x[LEFT-22]
	_ = x[OUTER-23]
	_ = x[JOIN-24]
	_ = x[CROSS-25]
	_ = x[VIEW-26]
	_ = x[DATABASE-27]
	_ = x[USER-28]
	_ = x[AS-29]
	_ = x[SCHEMA-30]
	_ = x[IF-31]
	_ = x[EXISTS-32]
}

const _Word_name = "SELECTFROMWHERELIMITOFFSETCREATETABLEPRIMARYKEYUNIQUEINDEXCONSTRAINTFOREIGNNULLISNOTDISTINCTGROUPBYWITHHAVINGINNERLEFTOUTERJOINCROSSVIEWDATABASEUSERASSCHEMAIFEXISTS"

var _Word_index = [...]uint8{0, 6, 10, 15, 20, 26, 32, 37, 44, 47, 53, 58, 68, 75, 79, 81, 84, 92, 97, 99, 103, 109, 114, 118, 123, 127, 132, 136, 144, 148, 150, 156, 158, 164}

func (i Word) String() string {
	if i >= Word(len(_Word_index)-1) {
		return "Word(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Word_name[_Word_index[i]:_Word_index[i+1]]
}
